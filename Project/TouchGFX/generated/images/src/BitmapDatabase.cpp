// -alpha_dither yes -dither 2 -non_opaque_image_format ARGB8888 -opaque_image_format RGB888 0x41ef6dc1
// Generated by imageconverter. Please, do not edit!

#include <touchgfx/Bitmap.hpp>
#include <BitmapDatabase.hpp>

#ifndef NO_USING_NAMESPACE_TOUCHGFX
using namespace touchgfx;
#endif

extern const unsigned char _Arrow_Dx[];
extern const unsigned char _Arrow_Sx[];
extern const unsigned char _Start[];
extern const unsigned char _Stop[];
extern const unsigned char _black_background[];
extern const unsigned char _blue_progressindicators_bg_medium_circle_indicator_bg_line_full[];

const touchgfx::Bitmap::BitmapData bitmap_database[] =
{
    { _Arrow_Dx, 0, 40, 40, 8, 13, 20, 13, touchgfx::Bitmap::ARGB8888 },
    { _Arrow_Sx, 0, 40, 40, 12, 13, 20, 13, touchgfx::Bitmap::ARGB8888 },
    { _Start, 0, 40, 40, 8, 12, 6, 7, touchgfx::Bitmap::ARGB8888 },
    { _Stop, 0, 40, 40, 16, 16, 7, 8, touchgfx::Bitmap::ARGB8888 },
    { _black_background, 0, 20, 20, 0, 0, 20, 20, touchgfx::Bitmap::RGB888 },
    { _blue_progressindicators_bg_medium_circle_indicator_bg_line_full, 0, 104, 104, 85, 28, 13, 48, touchgfx::Bitmap::ARGB8888 }
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
}

