/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/mainscreen_screen/MainScreenViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainScreenViewBase::MainScreenViewBase() :
    buttonCallback(this, &MainScreenViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &MainScreenViewBase::flexButtonCallbackHandler)
{
    CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    background.setBitmap(Bitmap(BITMAP_BLACK_BACKGROUND_ID));
    background.setPosition(0, 0, 240, 320);
    background.setScalingAlgorithm(ScalableImage::NEAREST_NEIGHBOR);

    PWMProgress.setXY(68, 160);
    PWMProgress.setProgressIndicatorPosition(0, 0, 104, 104);
    PWMProgress.setRange(0, 100);
    PWMProgress.setCenter(52, 52);
    PWMProgress.setRadius(50);
    PWMProgress.setLineWidth(0);
    PWMProgress.setStartEndAngle(0, 360);
    PWMProgress.setBackground(Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_CIRCLE_INDICATOR_BG_LINE_FULL_ID));
    PWMProgressPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 0));
    PWMProgress.setPainter(PWMProgressPainter);
    PWMProgress.setValue(33);

    PeltierTempText.setXY(10, 10);
    PeltierTempText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 0));
    PeltierTempText.setLinespacing(0);
    PeltierTempText.setTypedText(TypedText(T_TEMPPELTIER_TXT));

    ExtTempText.setXY(10, 45);
    ExtTempText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 0));
    ExtTempText.setLinespacing(0);
    ExtTempText.setTypedText(TypedText(T_TEMPEXT_TXT));

    PeltierTemp.setXY(100, 10);
    PeltierTemp.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 0));
    PeltierTemp.setLinespacing(0);
    PeltierTempBuffer[0] = 0;
    PeltierTemp.setWildcard(PeltierTempBuffer);
    PeltierTemp.resizeToCurrentText();
    PeltierTemp.setTypedText(TypedText(T_TEMPPELTIER));

    ExtTemp.setXY(100, 45);
    ExtTemp.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 0));
    ExtTemp.setLinespacing(0);
    ExtTempBuffer[0] = 0;
    ExtTemp.setWildcard(ExtTempBuffer);
    ExtTemp.resizeToCurrentText();
    ExtTemp.setTypedText(TypedText(T_TEMPEXT));

    PWMText.setXY(70, 114);
    PWMText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 0));
    PWMText.setLinespacing(0);
    PWMText.setTypedText(TypedText(T_PWM_TXT));

    PWMUpButton.setBoxWithBorderPosition(0, 0, 70, 50);
    PWMUpButton.setBorderSize(5);
    PWMUpButton.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
    PWMUpButton.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID), Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID));
    PWMUpButton.setIconXY(27, 12);
    PWMUpButton.setPosition(170, 148, 70, 50);
    PWMUpButton.setAction(flexButtonCallback);

    PWMDownButton.setBoxWithBorderPosition(0, 0, 70, 50);
    PWMDownButton.setBorderSize(5);
    PWMDownButton.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
    PWMDownButton.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID), Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID));
    PWMDownButton.setIconXY(27, 12);
    PWMDownButton.setPosition(-2, 148, 70, 50);
    PWMDownButton.setAction(flexButtonCallback);

    SettingButton.setXY(35, 264);
    SettingButton.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), Bitmap(BITMAP_BLUE_ICONS_SETTINGS_48_ID), Bitmap(BITMAP_BLUE_ICONS_SETTINGS_48_ID));
    SettingButton.setIconXY(62, 7);

    add(background);
    add(PWMProgress);
    add(PeltierTempText);
    add(ExtTempText);
    add(PeltierTemp);
    add(ExtTemp);
    add(PWMText);
    add(PWMUpButton);
    add(PWMDownButton);
    add(SettingButton);
}

void MainScreenViewBase::setupScreen()
{

}

void MainScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &SettingButton)
    {

    }
}

void MainScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &PWMUpButton)
    {
        //PWM_Up
        //When PWMUpButton clicked call virtual function
        //Call PWMUPClicked
        PWMUPClicked();
    }
    else if (&src == &PWMDownButton)
    {
        //PWM_Down
        //When PWMDownButton clicked call virtual function
        //Call PWMDownClicked
        PWMDownClicked();
    }
}
